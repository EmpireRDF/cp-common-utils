<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2005 - 2012, Clark & Parsia, LLC. <http://www.clarkparsia.com>
  -->

<project name="Core Utils" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Clark &amp; Parsia Utility Classes
    </description>

    <!-- Global Properties -->
	<property name="core" location="."/>
    <property name="core.src" location="${core}/src" />
	<property name="core.lib" location="${core}/lib" />
	<property name="core.test" location="${core}/test" />

    <property name="build" location="build" />
	<property name="build.core" location="${build}/core" />
	<property name="build.test" location="${build}/test" />

    <property name="dist" location="dist" />
	<property name="javadoc.dir" value="${dist}/javadocs"/>

    <property name="project.name" value="cp-common-utils" />
    <property name="project.version" value="2.5.0" />
	
	<property name="premainclass" value="com.clarkparsia.common.base.Instrumentor"/>
	
	<property name="ivy.settings" location="../settings/ivysettings.xml"/>

	<!-- ******************** IVY ********************** -->

	<property name="ivy.install.version" value="2.2.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="download-ivy" unless="offline">

		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			 dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
				  it into ant's lib dir (note that the latter copy will always take precedence).
				  We will not fail as long as local lib dir exists (it may be empty) and
				  ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>

		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<target name="clean-ivy-cache">
		<ivy:cleancache/>
		<delete dir="settings/ivy-cache" failonerror="false"/>
	</target>

	<!-- *********************************************** -->

	<target name="resolve" depends="clean-libs, init-ivy" description="--> retrieve dependencies with ivy">
		<ivy:configure file="${ivy.settings}" />

		<ivy:resolve file="${core}/ivy.xml"/>
		<ivy:retrieve pattern="${core.lib}/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]" type="jar"/>
		<ivy:cachepath pathid="core.classpath"/>
	</target>

	<target name="clean-libs">
		<delete dir="${core.lib}" />
	</target>

    <target name="init" depends="resolve">
		<path id="project.class.path">
			<path refid="core.classpath"/>
		</path>

        <pathconvert targetos="unix" property="classpath" refid="project.class.path" />
        <echo>CLASSPATH=${classpath}</echo>
        <!-- Create the time stamp -->
        <tstamp/>

        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
		<mkdir dir="${build.core}"/>
		<mkdir dir="${build.test}"/>

		<mkdir dir="${dist}"/>
    </target>

    <target name="compile" depends="init"
            description="Compile source files." >
        <javac source="1.5" target="1.5" srcdir="${core.src}" destdir="${build.core}" debug="yes" deprecation="yes">
            <classpath refid="project.class.path"/>
        </javac>
        
		<javac source="1.5" target="1.5" srcdir="${core.test}" destdir="${build.test}" debug="yes" deprecation="yes">
			<classpath>
				<path refid="core.classpath"/>
				<pathelement path="${build.core}"/>
			</classpath>
		</javac>
    </target>

    <target name="build" depends="compile"
            description="Compile sources and copy data files into build directory.">
        <copy todir="${build}">
            <fileset dir="${core.src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="distfiles">
       <!-- Copy in lib files -->
        <mkdir dir="${dist}/lib" />

        <copy todir="${dist}/lib">
            <fileset dir="${core.lib}">
                <include name="**/*.jar" />
                <exclude name="**/${project.name}*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="dist" depends="build,distfiles"
            description="Generate a distribution" >

        <echo>${Class-Path}</echo>
        <!-- Make Jar file. -->
        <jar jarfile="${dist}/${project.name}-${project.version}.jar"
             basedir="${build}/core">
            <manifest>
                <attribute name="Premain-Class" value="${premainclass}"/>
                <attribute name="Class-Path" value="${Class-Path}" />
            </manifest>
        </jar>
    </target>

    <target name="clean" description="Clean up build files">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>

	<target name="javadocs" depends="init">
		<javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false"
			nonavbar="false" noindex="false" splitindex="true" author="true"
			version="true" nodeprecatedlist="false" nodeprecated="false"
			doctitle="${project.name}-${project.version}"
			bottom="Copyright &#169; 2010-2013 Clark &amp; Parsia. All Rights Reserved.">

			<link href="http://docs.guava-libraries.googlecode.com/git-history/v12.0/javadoc/index.html"/>

			<classpath refid="project.class.path"/>
			<fileset dir="${core.src}" defaultexcludes="yes"/>
		</javadoc>
	</target>
	
	<!-- ********************* TEST ********************** -->

	<target name="test" depends="dist">
		<mkdir dir="dist/test-reports"/>
		<junit fork="yes" printsummary="yes" haltonfailure="yes" failureproperty="junit.failure">
			<test name="com.clarkparsia.common.AllTests" />

			<formatter type="xml" />
			<formatter type="brief" usefile="false"/>

			<classpath>
				<path refid="core.classpath"/>
				<pathelement path="${build.core}"/>
				<pathelement path="${build.test}"/>
			</classpath>
		</junit>

		<junitreport todir="dist/test-reports">
			<fileset dir="dist/test-reports">
				<include name="TEST-*.xml" />
				<include name="report.xml" />
			</fileset>
			<report todir="dist/test-reports" />
		</junitreport>
	</target>
</project>
